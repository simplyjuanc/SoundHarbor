// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  email         String        @unique
  password      String
  firstName     String?
  lastName      String?
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  // topArtists    Artist[]
  releasesOwned Release[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt
  UserAccount   UserAccount[]

  @@map("users")
}

model UserAccount {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Release {
  id          String    @id
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String
  label       String
  releaseType String?
  releaseDate DateTime?
  // genres      String[]
  imgUrl      String?
  spotifyUri  String?
  discogsUrl  String?
  // artist      Artist[]
  artists     String[]
  tracklist   Track[]
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  barcode     String
}

model Track {
  id         String   @id
  title      String
  duration   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  spotifyUrl String
  release    Release? @relation(fields: [releaseId], references: [id])
  releaseId  String?
}
